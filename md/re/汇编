[TOC]
# 基础知识点
## 内存存储顺序
向内存中存数据是从每个数据的高位到低位存  
10 在内存中是 0a  
1000h在内存中是 00 10

先定义10再定义1000h时  
在内存中的顺序是 0a 00 10

'ABC'在内存中是00 C B A  
ABC是对应的ASCII的十六进制

Intel 处理器使用小端(little-endian)顺序存储，其意思是变量的最低字节存储在最低地址单元，其它字节依次存储。  
如12345678h这个双字在内存中的存储情况为
78 56 34 12

## 进制问题
每个十六进制数位可以代表四个二进制数位，两个十六进制位可以表示一个字节的数据。
一位即为一个二进制数，一个字节是八位。

IA-32/IA-64体系中，基本存储单位是字节（byte)，一个字节是八位
字（word,2个字节)
双字（doubleword，4个字节)
8字节（quadword，8字节) 

## 原码反码补码
+10的原码是00001010,那他的反码,补码都和原码相同 也是00001010,原因是正数的原 反 补码相同

-10的原码是10001010,那他的反码是11110101,也就是符号位不变,其他位0变1,1变0. 他的补码是在反码的基础上,最低位加1,也就是11110110. 


## 指令执行
机器指令的执行包括三个基本步骤：  
取指令  
解码  
执行  

如指令使用了内存操作数，还需要额外的步骤  
取操作数  
存储输出操作数


指令执行的每一步至少占用一个时钟周期。  
处理器可以采用流水线技术来实现多个部件间的并行处理，以提高系统的效率。

一个内存操作，要求执行一系列的步骤，往往需要多个时钟周期。

## 操作模式
IA-32处理器有3种基本的操作模式
- 保护模式，是基本模式
- 实地址模式
- 系统管理模式，为操作系统提供了用以实现电源管理和系统安全等功能的机制。通常是由想自定义特定的系统启动过程的计算机制造商实现的。

- 虚拟8086模式，是保护模式的一个特例。在保护模式下执行实地址模式的软件。

### 保护模式
是从286开始引入保护模式的概念，在之前的8086不具有这种工作模式
指令分成不同的级别，程序也分成不同的级别
不同程序间内存独立，一个程序不能去访问其他程序的内存
现代的windows，Linux等操作系统，都把CPU设置在保护模式下工作

#### 地址空间
在32位的保护模式下，一个任务或程序可以寻址4GB的线性地址空间－－32位地址线能够表达的上限
实地址模式下，只用到20根地址线，最大地址访问量是1M

### 实地址模式
即是8086的工作模式  
由于IA-32的向前兼容特性，可以理解成在整个IA-32系列CPU中都包含了8086这个CPU内核
在CPU加电时，CPU工作在实模式。平时机器启动过程中，开始的开机自检阶段，CPU工作在实模式，在windows操作系统载入过程中的某一步，CPU操作模式被置成保护模式，然后就一直工作在保护模式
实模式无指令级别概念，内存也不独立，不同程序间可以相互访问对方的内存，使得系统可能不稳定。
在DOS操作系统中，CPU工作在实模式

### 虚拟8086模式
在虚拟8086模式下，一个系统中可以运行多个虚拟的8086模式程序，每个程序拥有独立的1M地址空间。

## 寄存器
CPU内部的存储单元，访问速度比内存快得多

### 通用寄存器
8个32位的通用寄存器
EAX,EBX,ECX,EDX,ESI,EDI,EBP,ESP
把这些寄存器名字中的第一个字母E去掉，这些寄存器就变成8个16位的通用寄存器AX，BX,CX,DX,SI,DI,BP,SP
其中，AX，BX，CX，DX这4个16位的寄存器每个寄存器又可以对半分成两个8位的寄存器，名字分别为AH，AL，BH，BL，CH，CL，DH，DL

#### EAX
EAX在乘法和除法指令中被自动使用。通常被称为扩展累加寄存器。
在某些指令中，CPU自动使用ECX作为循环计数器。


ESI和EDI由高速内存数据传送指令使用，通常称为扩展源变址寄存器(Extended Source Index Register)和扩展目的变址寄存器(Extended Destination Index Register)。

第5版翻译为：扩展源指针寄存器，扩展目的指针寄存器。
ESI通常与DS段配合使用；EDI通常与ES段配合使用
ESP寻址堆栈（一种系统内存结构）上的数据，极少用于普通的算述运算和数据传送，通常称之为扩展堆栈指针寄存器。
与SS配合
高级语言使用EBP指向堆栈上的函数参数和局部变量。一般不应该用于普通算术运算和数据传送。通常称为扩展帧指针寄存器。
通常翻译为：基址指针寄存器


EBX -- 基址寄存器（常用于地址索引）
EDX -- 数据寄存器（常用于数据传递） 



在实模式下，段寄存器用来存放段的基地址
在保护模式下，段寄存器存放段描述符的索引（段描述符选择子，segment descriptor selector）
在保护模式下的应用程序编程，较少关注段寄存器，而在实模式下，则是必须关注的，不正确的段寄存器设置，会导致内存的错误访问。
通常每个段寄存器有特定的用途
CS用于指向代码
SS用于指向堆栈
DS等其他段寄存器指向数据(全局变量)



### 指令指针寄存器EIP
存放下一条要执行的指令的地址
每执行完一条指令，CPU会自动修改EIP，以指向下一条指令的地址，通常，其值是递增的。但如遇到跳转指令（相当于C语言中goto语句），则不一定是递增了。
不能用数据传送指令、算术指令等指令去修改EIP的值。


### EFLAGS寄存器（标志寄存器）
由控制CPU的操作或反映CPU某些运算结果的独立的二进制位构成。

#### CF
⑴ C (Carry Flag，进位标志CF)  
结果的最高位（如：字节、字操作的D7、D15）进位或借位时C=1。
#### AF
⑵ A (Auxiliary Carry Flag，辅助进位标志AC)  
低4位进位或借位时A=1。
#### PF
⑶ P (Parity Flag，奇偶标志PF)  
操作结果(的最低有效字节)中“1”的个数为偶数P=1。 
#### ZF
⑷ Z (Zero Flag，零标志ZF)  
结果为0则Z=1。
#### SF
⑸ S (Sign Flag,符号标志SF)  
S = 符号位值（补码时0=正，1=负）。 
#### OF
⑹ O（Overflow Flag，溢出标志OF）  
运算结果超界(结果太大或太小)时O=1。


# 编程基础知识
## 常量
### 整数常量

由可选的符号开头，后跟一个或多个数字以及一个表示数的进制的后缀：
[{+|-}]数字[进制]

进制后缀可能为（不区分大小写）：  
h 十六进制（以字母开头的话，前需加0）  
q/o 八进制  
b 二进制  
d 十进制（如不跟进制后缀，黙认为十进制）  
r 编码实数   


### 实数常量
至少有一个数字和一个小数点，如果没有小数点，就是一个整数常量


## 保留字
汇编语言有保留字，它们只能用于特定场合  
主要的保留字分类  
- 指令的助记符，如mov, add
- 伪指令，用于告诉汇编器如何汇编程序的指令
- 属性，表示变量和操作数的大小和使用信息，如byte
- 运算符(Operator)， 在常量表达式中使用
- 预定义符号，汇编器内部使用的


## 标识符
- 是程序员命名的符号，用于标识变量、常量、过程名或代码标号。  
- 标识符长度1~247个字符  
- 默认时大小写不敏感  
- 第一个字符可以是字母、_、@、?、$,不能是数字，后续字符可以含数字  
- 不能与保留字同名  
- 汇编器内部使用了一些@打头的符号，自定义时尽量不用@打头

## 伪指令
由汇编器识别并在编译时执行相应动作的命令，没有对应的机器码，不在运行时执行。  
伪指令可用于定义变量、过程、宏、定义段等  
每个汇编器都有一套自己的伪指令，不同汇编器可能有较大差异。

例如：  
DWORD是用于定义双字变量的伪指令  
.code是用于标识代码段(segment)  
.stack用于表示栈段(segment)在其后还可以指定栈的大小  

## 指令
汇编语言中的指令是一条汇编语句  
在程序被汇编后变成可执行的机器指令  
一条汇编指令包括4个部分：  
- 标号（可选）
- 助记符
- 操作数
- 注释(可选)


## 标号
是充当指令或数据位置标记的标识符，放在指令前的标号表示该条指令所在的起始地址；放在变量前的标号表示这个变量所在的起始地址。


### 数据标号

形如   `count db 100`  
此意为定义一个标号名叫count的字节变量，初值100
汇编器会为每个标号分配一个地址。  
允许在一个标号后定义多个数据项，如   
```
Array dword 1024,2048
dword 4096,8192
```
这个例子中，表示定义了四个双字，连续依次存放，第二行前边没有标号，也是允许的。


### 代码标号
放在指令前，标号名后要跟冒号
形式如  
```
Target：
            mov ax,bx
            jmp  target
```
代码标号表示当前指令的地址  
标号可以与指令在同一行，也可以独立成行，如果独立成行，其地址为标号后第一条指令的地址


## 指令助记符
一般是一个单词缩写，如mov,sub,jmp等


## 操作数
一条汇编指令，可能包含0~3个操作数  
操作数可能是寄存器、内存操作数、常量、I/O端口

在有两个操作数的指令中，第一个操作数称为目的操作数，第二个操作数称为源操作数。指令通常会修改目的操作数的内容。


## 注释
汇编语言的注释很有必要
有两种注释形式
- 单行注释，以分号开始至行尾的内容算注释

- 多行注释，利用comment ,后边定义一个符号，这对符号间的内容为注释，形式如：
```
comment &
  12345
   56789
&
```

## 定义数据
### 内部数据类型
支持的整数类型列表
```
BYTE      （DB）       字节
SBYTE     （DB）       带符号字节
WORD      （DW）       字
SWORD                  带符号字
DWORD     （DD）
SDWORD
QWORD     （DQ）
TBYTE     （DT）
```
注意，有无符号在汇编里主要是方便程序员区分的，汇编器并不区分有无符号


数据定义语句在内存中给变量分配存储空间，可以指定名字，语法：  
`[变量名]  数据类型伪指令  初始值 [,初始值,…]`  
变量名是可选的。变量名代表变量地址。  
汇编(assemble)后，是用地址来区分的。 

初始值，定义变量时需指定初始值：  
如果不想指定初始值，可以用问号(?)作为初始值。此时它的初始值不确定；  
初始值可以是表达式；  
不管初始值的格式如何，均由汇编器转换为二进制数据


使用作者提供的库函数显示变量的值。如调用DumpRegs, WriteHex。



### 多个初始值
可以指定多个初始值，表示连续占用多个空间，依次存储这些初始值；  
不同的初始值用逗号隔开，标号（变量名）代表第一个初始值的偏移。  
单条数据定义中，初始值可以使用不同基数，甚至字符、字符串都可以混用，  
如list2 byte 0aH , 20,’A’
如果是连续定义多个字符，可以用字符串的形式


例：`list  byte  10,20,30,40`  
假设list的起始偏移为20，则表示10这个值放在20号单元中，20这个值放在下一个单元即21号单元中，然后22号单元里存30的值，23号单元存40的值。


### 字符串
如`greet1 byte “Good”`  
每个字符占一个字节空间，值为其ASCII码值,也可以这样定义字符串  
`S1 byte ‘G’,’o’,’o’,’d’`

如要定义如C语言中的0结尾的串，则如下：`s2 db “Good”,0`

字符串定义时可以占多行，如
```
S3 db “First ”
   db “Line”,0dh,0ah
   db “Second Line”
```
此例中，定义时占用3行，在存储时依次存储各字符，其中的`0dH`,`0aH`分别是ASCII码中的回车换行符，如果将上述串显示，源码中的前两行字串会显示在一行。


### DUP 运算符(Operator，操作符)
使用一个整数表达式作为计数器，为多个数据项分配存储空间。

语法形式  
`V1  BYTE  10  dup (0) `  
意思表示v1占用10个字节空间，每个字节的初值均为0
初值可以是多个值，则表示是对这多个值周期性地存储

DUP可以嵌套

### .data?伪指令
.data?伪指令用于声明未初始化的数据段  
在生成的执行文件中，未初始化段不占用文件的存储空间，这有利于减少执行文件尺寸
```
.data
smallArray DWORD   10         DUP(0)
.data    ?
bigArray    DWORD    5000     DUP(?)
```

### 混合代码与数据
程序中.data，.code表示的数据段和代码段可以出现多次
汇编器会把多个data整合到一起，多个代码段整合到一起。

### 符号常量
通过为整数表达式或文本指定标识符来创建符号常量；  
符号不预留存储空间；  
相当于C语言里用define定义的宏；  
可以用“=”、EQU以及TESTEQU等三种方式进行创建。  
等号伪指令和整数表达式联系起来

`name = express`  
表达式可以是32位的整数值，汇编预处理时，所有出现名字的地方都会替换为对应的表达式。  
例：
```
COUNT=500
Mov ax,COUNT
```
将生成并编译为：mov ax,500

### 键值
键值的定义：程序中经常要为重要的键盘字符定义符号。  
如27H是ESC键的ACII，07H是响铃的ASCII

例：
```
mov al,ESC_key        ;好的风格
mov al,27h            ;不好的风格
```


# 各种指令例子

使用DUP操作符  
`Array DB COUNT dup(0)`

$ 运算符(操作符，operator，当前地址计数器)，用于表示当前地址

重定义：同一个程序中以“=”定义的符号可以重定义。
```
COUNT=5
Mov al,COUNT       ;al=5
COUNT=10
Mov al,COUNT      ;al=10        
```

EQU不能被重定义

EQU伪指令把一个符号名与一个整数表达式或任意文本联系起来
有三种格式：
```
Name EQU expression   ;必须是有效的整数表达式
Name EQU symbol       ;必须是已用“=”或EQU定义的符号名
Name EQU <test>       ;尖括号内可以是任意文本
```
当汇编器遇到已定义的名字name时，就会用name代表的整数值或文本替代。当定义任何非整数值的时候，EQU非常有用。例：
```
PI EQU <3.1416>
Presskey EQU <"press any key to continue…,0">
```
不允许重定义  
等号符(=)也类似于EQU，也是定义宏，但等号宏允许赋新值(重定义)。

直接内存操作数  
变量名是该变量相对其所在的数据段开始处的偏移。

MOV指令的规则  
两个操作数的尺寸需一致  
两个操作数不能同时为内存操作数  
目的操作数不能是CS，EIP，IP  
立即数不能直接送给段寄存器  

MOV指令不影响标志  

复制整数常量到变量或寄存器时，  
需要考虑该常量需要的最小字节数。

## 整数的0符号扩展
MOVZX是将高位补0，适用于无符号数  
MOVSX是把符号位扩展到整个高位部分，适用于有符号数。  
目的操作数不支持内存操作数，不支持段寄存器

## LAHF
LAHF指令将EFLAGS寄存器的低字节复制到AH寄存器，被复制的标志包括：符号标志，零标志、辅助进位标志、奇偶标志和进位标志。使用该指令可以方便的将标志值保存在变量中：
```
.data
Saveflags BYTE ?
.code
Lahf                     ;状态标志送AH
Mov Saveflags,ah    ;保存到变量中
```

## SAHF
SAHF指令相反，将AH值送入EFLAGS寄存器低字节中，用于恢复刚才保存在变量中的标志：
```
Mov ah,Saveflags
Sahf
```
## XCHG指令

两个操作数，功能是将两个操作数的内容交换。  
XCHG指令操作数不可以是立即数，其他规则与MOV指令相同

## 直接-偏移操作数

在变量名后加上一个偏移值，称作直接-偏移操作数(Direct-Offset Operands)，可以通过它来访问没有显示标号的内存地址。。
```
.data
arrayB byte 10h,20h,30,40
.code
Mov al , arrayB           ; al=10h
Mov al , [arrayB + 1]   ;al=20h，不要求一定要使用[ ]
Mov al , arrayB + 1     ;与上例同价，al=20h
MASM 不会进行范围检查
```

## INC DEC
INC 加1，DEC减1  
支持格式  
`INC  reg/mem`  
会影响到标志位(AF OF PF SF ZF)，但不影响进位标志位(CF)   ----  比较特殊


将相同尺寸的源操作数和目的操作数相加，结果存到目的操作数
指令规则与MOV指令相同
会修改CF，ZF，SF，OF，AF，PF


## NEG 指令
求数的相反数，即用0去减操作数  
支持格式  
`NEG  reg`  
`NEG  mem`  
如ADD指令一样影响标志位

执行算术运算时，往往要求了解运算结果的特征。在程序中，可以使用标志位来判断。  
标志位的主要用途  
进位位(CF)用于判断无符号数有无溢出  
溢出位(OF)用于判断有符号数有无溢出  
零标位(ZF)用于判断结果是否为0，如两数是否相等  
符号位(SF)标识结果的正负



## OFFSET 操作符
返回数据标号的偏移地址，以字节为单位。
```
.data
bVal BYTE        ?
wVal WORD     ?
dVal DWORD   ?
dVal2 DWORD  ?

Mov esi , OFFSET  bVal
Mov esi , OFFSET wVal
Mov esi , OFFSET dVal
Mov esi , OFFSET dVal2
Mov esi , OFFSET dVal2+2


;设bVal的偏移为100
;则esi = 101
;esi = 103
;esi = 107
;esi = 109
```


功能：将变量的位置按指定的大小对齐。  
大小可以指定为1，2，4，8，16（指定为不同的指令集时稍有些差异，如.386只支持1，2，4）  
默认大小为1。  
如设为16，意即后边的变量的地址将是16的整数倍。
```
.data 
align 1
vb1 db 1
vd1 dd 10
align 4
vb2 db ?
vd2 dd ?
.code
alignTest proc
   mov esi , offset vb1     ; 100
   mov esi , offset vd1     ; 101
   mov esi , offset vb2     ; 108
   mov esi , offset vd2     ; 109
alignTest endp
end alignTest 
```


## PTR 
重载操作数声明的默认大小，类似于强制类型转换

```
.data 
  vb1 db 1
  vd1 dd 12345678h
.code
ptrTest proc
   mov al ,    vb1                 ;al = 1
   mov eax , vd1                 ;eax = 12345678h
   mov ax ,   word ptr  vb1  ; ax=7801H
   mov al  ,   byte ptr  vd1   ; al = 78H
ptrTest endp
end ptrTest 
```


## TYPE
返回按字节计算的变量的单个元素的大小

```
.data 
  vb1 db 1
  vd1 dd 12345678h
.code
typeTest proc
   mov al ,    vb1
   mov eax , vd1 
   mov al ,    type  vb1    ; al=1H
   mov al ,    type  vd1    ; al = 4H
typeTest endp
end typeTest 
```


## LENGTHOF 

功能：返回操作数的元素个数  
只返回同一行的元素个数  
如果声明的数组初值跨行了，则只计算第一行的初值个数  
如果初值的末尾是逗号，则会包括下一行的个数



## SIZEOF 
返回操作数所占的字节数总数(即等于LENGTHOF和TYPE返回值的乘积)


## LABEL伪指令
为其后定义的变量提供一个别名以及一个不同的尺寸属性  
它不会分配存储空间  
不再需要PTR操作符  

## 间接寻址

利用寄存器内的值作为地址，访问操作数的方式称作间接寻址(indirect addressing)  

表达的方法是将寄存器用方括号括起来  
如mov ax,[si],即表示用si寄存器中的值作为地址，访问该内存单元，取出值存到ax寄存器中  

保护模式，间接操作数可以使用任意的32位通用寄存器  
如果越界访问，可能引发异常（保护故障, General Protection Fault)  
实模式则只支持si,di,bx,bp四个寄存器作为间接寻址的寄存器  
如果使用bp,默认的段寄存器为SS  
没有保护故障的概念  

间接操作数可以是源操作数，也可以是目的操作数  

有时，需要与PTR 连用  
如 inc [esi]   ，这句话是错误的，因为不知道操作对象是字节，是字，还是其它的。  
改成如  inc  word ptr [esi]   


## 变址操作数
把寄存器的值加上一个常量作为地址，访问内存操作数的方式，称作变址寻址  

语法表示有两种形式  
`Constant [reg]`  
`[reg + constant]`

```
.data 
  vb1 byte  1 , 2 , 3 
.code
  mov esi , 0
  mov al , vb1 [ esi ]        ; al = 1
  mov al  , [ esi + vb1 ]   ; al = 1
  mov al  , [esi + vb1 + 1]   ; al = 2
```

## JMP 和LOOP指令

无条件转移，直接跳到新的地址，如JMP指令，相当于C语言中的goto语句  
条件转移，根据条件，可以跳到指定的地方，也可能不跳转而顺序执行后边的指令。相当于C语言中的if语句，但汇编中的条件转移指令很多，一般是通过EFLAGS标志寄存器中的标志位作为判别依据。


JMP  
格式： JMP  目的地址  
功能：接着从目的地址开始执行指令  
目的地址一般为标号  
通常在当前过程内跳转  
Logic: EIP <-- target

```
top:
	;指令
	;指令
	jmp top

LOOP
```
格式： LOOP  目的地址  
功能：将ecx的值减1，接着与0比较，如果不等于0，就执行目的地址开始的指令，如果等于0 ，则不跳转，接着执行紧跟在LOOP指令后的指令  
通常，ecx里的值就是循环次数。  
但如果初值为0，因是先减1再判断是否等于0，所以，实际实际循环次数就是  1 00 00 00 00 H。  
LOOPD也使用ecx控制循环，LOOPW使用cx控制循环。  
实模式下，使用的是cx作为控制循环的寄存器  
目的地址和当前地址只能相距-128~127之间  
循环可以嵌套  


## 数组求和
```
INCLUDE irvine32.inc
.data 
  vb1 byte  1 , 2 , 3 
.code
  main proc
      mov esi  , offset vb1
      mov ecx , lengthof vb1
      mov al    , 0 
   L1:
      add  al   , [ esi ]
      add  esi , type vb1
      loop L1
      exit
  main endp
end main 
```

## 复制字符串
```
INCLUDE irvine32.inc
.data 
  s1  byte  "source string",0
  s2  byte sizeof s1 dup(0) 
.code
  main proc
      mov esi , 0
      mov ecx , sizeof s1
   L1:
      mov al , s1[ esi ]
      mov s2[esi] , al
      inc esi  
      loop L1
      exit
   main endp
End main 
```


## 堆栈

ESP是指向栈的特定位置的一个32位偏移值，ESP指向最后压入到栈的数据。  
堆栈只有一个出口，即当前栈顶；  
用堆栈指针寄存器ESP指定；栈顶是地址较小的一端（低端），栈底不变。  
一般不会直接修改ESP，而是通过使用CALL，RET，PUSH，POP等指令，由这些指令间接操作ESP。

堆栈操作的单位是双字；  
双字数据从栈顶压入和弹出时，都是低地址字节送低字节，高地址字节送高字节；  

### PUSH
进栈指令先使堆栈指针ESP减4  
将要压入的32位值拷贝到ESP指向的内存

### POP
将ESP指向的内存中的内容取出来，放到操作数中  
将ESP加4


对于32位操作数，ESP减4，存到栈中的内容为双字； 

对于16位操作数，ESP减2，存到栈中的内容为字。

保护模式的立即数总是32位的。


对于32位操作数，是先从栈中拷贝双字到操作数中，然后ESP加4；  
对于16位操作数，是先从栈中拷贝字到操作数中，然后ESP加2。


PUSHFD指令把32位的标志寄存器压入堆栈；  
POPFD是从堆栈中弹出32位值到标志寄存器中。  
两指令无操作数。

实模式下标志寄存器是16位的，入栈出栈指令分别是PUSHF，POPF。  


把八个32位通用寄存器按序全部压入堆栈。  
入栈顺序：EAX，ECX，EDX，EBX，ESP原值，EBP，ESI，EDI  
POPAD是以上序反序从堆栈中依次弹出值到八个32位通用寄存器中  

PUSHA和POPA是上述寄存器对应的16位寄存器的入栈和出栈指令  

```
.data
aName BYTE "My first string",0
nameSize=($-aName)-1
. code
main PROC
mov ecx, nameSize
mov esi,0
L1: movzx eax, aName[esi]
push eax
inc esi
1oop L1
mov ecx, nameSize
mov esi,0
L2: pop eax
mov aName[esi], al
inc esi
1oop L2
main ENDP
end main
```


## 过程
```
过程名	PROC
			……	;过程体
		过程名	ENDP
		;过程名为符合语法的标识符
```
PROC后面可加参数：NEAR或FAR



主过程定义的形式：  
```
Main proc
…
Main endp
	    end main
```
这里的main,表示过程名  
一般过程应该有返回指令ret。但对于启始过程，需要采用操作系统提供的方法结束启始过程以返回到操作系统。  
Windows下，需要调用API函数ExitProcess
调用exit

### CALL
CALL是调用过程的指令，CALL指令用在主程序中，实现子程序的调用。分成段内调用（近调用）和段间调用（远调用）

入栈“返回地址”：将EIP压栈（CALL下条指令的地址压入堆栈）  
将子函数的第一条指令地址送入EIP


### USES
用法：是在定义过程时，可以在proc后跟uses操作符,然后再跟要保护的寄存器列表(用空格或制表符分隔)。  

功能：指示汇编器在过程开始时添加压栈指令（压栈的顺序即为uses操作符后面跟的寄存器顺序）;在过程结束时加出栈指令。


## 逻辑
逻辑与指令 AND  
逻辑或指令 OR  
逻辑非指令 NOT  
逻辑异或指令 XOR  
测试指令 TEST  

逻辑与指令AND：
按位进行逻辑与，结果返回目的操作数

设置CF＝OF＝0
影响SF，ZF和PF

应用之一：位屏蔽（清除选定的位，并同时保留其他位）  
举例：要对某个数中的某几位清0，其他位不变，则可以让这个数跟另一个数相与：要清零的位设置为0，不变的位设置为1。

应用之二
原理
```
‘A’：41H= 0100 0001B
‘a’： 61H=0110 0001B
```
小写字母转成大写字母
```
.data
 array BYTE  "This Sentence is in Mixed Case",0 
.code 
mov ecx,LENGTHOF array 
mov esi,OFFSET array
 L1:   and BYTE PTR [esi],11011111b ; clear bit 5
inc esi
loop L1 
```


编写一条指令，用16位操作数清除AX的高8位，而AX的低8位保持不变

`and AX ， 00FFh`


编写一条指令，用16位操作数使AX的高8位置1，而AX的低8位保持不变。

`or AX ， 0FF00h`


编写一条指令，使EAX中所有位取反。

`xor EAX ， 0FFFFFFFFh`


逻辑非指令NOT：
按位进行逻辑非，结果返回操作数，结果被称为反码

TEST指令像AND指令一样来设置状态标志，不同的是TEST指令不修改目标操作数。


编写一条指令，实现如下功能，，当EAX的值为偶数时，将零标志置1，当EAX的值为奇数时，将零标志清零。  

`test eax ， 1`

除NOT指令不影响标志外  
其他逻辑指令  
使OF＝CF＝0  
根据结果按定义影响ZF、SF和PF  


## 条件跳转
### CMP
目的操作数减去源操作数，不修改操作数的值，但会修改标志位的值（会修改OF、SF、ZF、CF、AF、PF）。

基于特定标志位的值跳转
```
JC		CF=1		Jump if Carry
JNC		CF=0		Jump if Not Carry
JZ 		ZF=1		Jump if Zero 
JNZ 		ZF=0		Jump if Not Zero
JP		PF=1		Jump if Parity
JNP		PF=0		Jump if Not Parity
JS		SF=1		Jump if Sign
JNS		SF=0		Jump if Not Sign
JO		OF=1		Jump if Overflow
JNO		OF=0		Jump if Not Overflow
```

根据两个操作数是否相等
```
JE		ZF=1		Jump if Carry
JNE		ZF=0		Jump if Not Carry
JCXZ 		CX=0		Jump if CX Zero 
JECXZ 		ECX=0		Jump if ECX Zero
```

基于无符号操作数的比较结果:高（Above）、低（Below）  
格式：`Jcond OP1，OP2`
```
高于（不低于等于）：JA（JNBE）	CF=0且ZF=0
Jump if Above/Not Below or Equal
高于等于（不低于）：JAE（JNB）	CF=0
Jump if Above or Equal/Not Below
低于（不高于等于）：JB（JNAE）	CF=1
Jump if Below/Not Above or Equal
低于等于（不高于）：JBE（JNA）	CF=1或ZF=1
Jump if Below or Equal/Not Above	
```

基于有符号操作数的比较结果:大（Greater）、小（Less）
格式：`Jcond OP1，OP2`

```
大于（不小于等于）：JG（JNLE）	SF=OF且ZF=0
Jump if Greater/Not Less or Equal
大于等于（不小于）：JGE（JNL）	SF=OF
Jump if Greater or Equal/Not Less
小于（不大于等于）：JL（JNGE）	SF≠OF
Jump if Less/Not Greater or Equal
小于等于（不大于）：JLE（JNG）	ZF≠OF或ZF=1
Jump if Less or Equal/Not Greater 	
```


```
BubbleSort proc   uses eax ecx esi  
;esi指向要排序的双字数组，ecx为元素个数

Dec ecx
L1:push ecx
     push esi
L2:mov eax , [esi]
     cmp eax , [esi + 4]
     jg L3
     xchg eax , [esi+4]
     mov [esi] ,eax
L3:add esi ,4
     loop L2
     pop esi
     pop ecx
Loop L1

ret        
BubbleSort endp
```




# 零碎知识点

一般说来，加方括号 [ ]    
表示一种间接的取操作数方式，有点类似于C语言中的指针概念。

第一条指令 ADD AL , [SI] 中，[SI]表示寄存器间接寻址。  
也就是说，与AL中内容相加的加数，不是SI寄存器的内容，而是以SI的内容作为地址指针的内存操作数。

假设SI的内容是1234H，这条加法指令，不是将1234H加到AL里（也加不了，数据类型不对），而是以1234H作为地址，从内存的数据段（DS所指）中，段内偏移地址为1234H的那个内存单元中取出一个字节的数据来，加到AL中。

同样的，第二条指令 MOV [20H], AL，是将AL中的内容传送到内存里的一个单元中去。这个单元的有效地址就是[20H]。
这里，加了方括号的20H，不是运算所用的数据，而是数据的地址。


对问题补充的回复：  
AL是不可能加方括号的。  
8086汇编中，能加方括号的只有4个寄存器：SI, DI, BX, BP  
常数也可以加方括号，比如 [020H]  
另外，变量名可以加方括号，但与上面两种情况不同，加了方括号的变量名，意义不变。  

至于方括号内，可以出现BX+DI，SI+2这样的表达式，这是一些不同的寻址方式。  
SI 是寄存器寻址  
[SI]是寄存器间接寻址  
[SI+2]是相对的寄存器间接寻址，又称直接变址寻址，它也可以写成2[SI]这样的形式  
[BX+SI]是基址变址寻址，也可写成[BX][SI]  
[BX+SI+20H]是相对的基址变址寻址，可以写成20H[BX][SI]之类的形式，将20H换成变量名也可以。   



【5】假设CL＝98H，执行“MOVZX DX,CL”后，DX＝______，这称为_____扩展。  
•	0098H，零位  
【6】假设CL＝98H，执行“MOVSX DX,CL”后，DX＝__________，这称为__________扩展。  
•	FF98H，符号




